#Filter and Group By Solution
class Solution:
    def carFleet(self, target: int, position: List[int], speed: List[int]) -> int:
        sums = []
        for i in range (0, len(position)):
            sums.append((position[i], position[i]+speed[i]))

        sums = sorted(sums, key=lambda x : x[0])
        ans = 0
        while len(sums) !=0:
            filter_function = lambda x : x[1] < target
            filter_function1 = lambda x : x[1] >= target
            if len(list(filter(filter_function1, sums))) !=0:
                ans += 1
            sums = list(filter(filter_function, sums))
            grouped_tuples = groupby(sums, key=itemgetter(1))
            sums = [
                (list(map(itemgetter(0), group)), key*2)
                for key, group in grouped_tuples
            ]
            print(sums)
        return ans

#Sort and Reverse Solution
class Solution:
    def carFleet(self, target: int, position: List[int], speed: List[int]) -> int:
        car_indices_sorted_by_position = sorted(range(len(position)), key=lambda idx: position[idx])

        fleet_count = 0
        previous_time = 0

        for i in car_indices_sorted_by_position[::-1]:
            time_to_reach_target = (target - position[i]) / speed[i]
            if time_to_reach_target > previous_time:
                fleet_count += 1
                previous_time = time_to_reach_target

        return fleet_count
